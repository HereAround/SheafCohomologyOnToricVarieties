LoadPackage( "H0Approximator" );
LoadPackage( "SheafC" );
pairs := [ [ [ 5,-2,-2,-1 ], [2, -2, -4, -2] ],
           [ [ 5, -2, -2, -1], [1, -1, -3, 0] ],
           [ [5, -2, -2, -1], [1, 2, -2, 0] ],
           [ [5, -2, -2, -1], [1, 2, -2, 1] ],
           [ [5, -2, -2, -1], [1, 1, -4, -1] ],
           [ [5, -2, -2, -1], [1, -1, -4, -1] ],
           [ [5, -2, -2, -1], [1, -2, -4, 2] ],
           [ [5, -2, -2, -1], [1, 1, -4, 1] ],
           [ [5, -2, -2, -1], [1, -1, -2, 3] ],
           [ [5, -2, -2, -1], [2, -1, -4, 1] ],
           [ [5, -2, -2, -1], [1, 2, -3, 1] ],
           [ [5, -2, -2, -1], [1, 1, -4, 0] ],
[ [5, -2, -2, -1],[1, 2, -2, -2] ],
[ [3, -1, -1, -1],[2, 1, -4, 1] ],
[ [3, -1, -1, -1],[1, -3, -3, -2] ],
[ [3, -1, -1, -1],[1, -1, -3, 0] ],
[ [3, -1, -1, -1],[1, -2, -3, -2] ],
[ [3, -1, -1, -1],[1, -1, -3, -1] ],
[ [3, -1, -1, -1],[1, -3, -4, -2] ],
[ [3, -1, -1, -1],[2, 1, -4, 2] ],
[ [3, -1, -1, -1],[2, 2, -4, 2] ],
[ [3, -1, -1, -1],[1, -1, -4, -1] ],
[ [3, -1, -1, -1],[1, 1, -3, 1] ],
[ [3, -1, -1, -1],[1, 1, -3, 0] ],
[ [3, -1, -1, -1],[1, -1, -2, 0] ],
[ [3, -1, -1, -1],[1, 1, -3, 2] ],
[ [5, -1, -1, -2],[1, -2, -2, -3] ],
[ [5, -1, -1, -2],[1, 1, -4, 2] ],
[ [5, -1, -1, -2],[1, 1, -4, 1] ],
[ [5, -1, -1, -2],[1, -1, -3, -2] ],
[ [5, -1, -1, -2],[1, 1, -3, -1] ],
[ [5, -1, -1, -2],[1, 1, -3, -2] ],
[ [5, -1, -1, -2],[1, 2, -2, -1] ],
[ [5, -1, -1, -2],[1, 1, -4, 0] ],
[ [5, -1, -1, -2],[1, -2, -1, -3] ],
[ [5, -1, -1, -2],[1, 1, -3, 1] ],
[ [5, -1, -1, -2],[1, -1, -2, -2] ],
[ [5, -1, -1, -2],[1, -2, -3, -3] ],
[ [5, -1, -1, -2],[1, 1, -4, -1] ],
[ [4, -1, -1, -1],[1, -2, -3, -1] ],
[ [4, -1, -1, -1],[1, -3, -4, -3] ],
[ [4, -1, -1, -1],[1, 1, -3, 0] ],
[ [4, -1, -1, -1],[1, -3, -3, -3] ],
[ [4, -1, -1, -1],[1, -3, -2, -3] ],
[ [4, -1, -1, -1],[1, 2, -2, -1] ],
[ [4, -1, -1, -1],[1, 1, -3, -3] ],
[ [4, -1, -1, -1],[1, 1, -3, -3] ],
[ [4, -1, -1, -1],[2, 3, -4, -1] ],
[ [4, -1, -1, -1],[1, 2, -4, 2] ],
[ [4, -1, -1, -1],[1, -2, -3, -2] ],
[ [4, -1, -1, -1],[1, 3, -3, 1] ],
[ [4, -1, -1, -1],[1, -1, -3, 0] ],
[ [4, -1, -2, 0],[1, -2, -1, 4] ],
[ [4, -1, -2, 1],[2, -1, -2, 5] ],
[ [4, -1, -2, 1],[1, -1, -2, -1] ],
[ [4, -1, -2, 1],[1, -2, -2, -2] ],
[ [4, -1, -2, 1],[2, -3, -2, -1] ],
[ [4, -1, -2, 1],[1, -2, -1, 4] ],
[ [4, -1, -2, 1],[1, -2, -2, -3] ],
[ [4, -1, -2, 1],[2, -3, -2, -2] ],
[ [4, -1, -2, 1],[1, -2, 1, -1] ],
[ [4, -1, -2, 1],[2, -2, -1, -2] ],
[ [4, -1, -2, 1],[2, -2, -2, 7] ],
[ [4, -1, -2, 1],[3, -1, -2, 10] ],
[ [4, -1, -2, 1],[1, -3, 1, -1] ],
[ [4, -1, -2, -1],[3, -3, -1, -2] ],
[ [4, -1, -2, -1],[4, -7, -1, -3] ],
[ [6, -3, -2, -1],[1, 1, -4, 1] ],
[ [6, -3, -2, -1],[1, 0, -3, 1] ],
[ [4, -1, -2, -1],[2, 3, -3, 1] ],
[ [4, -1, -2, -1],[3, 1, -4, -1] ],
[ [4, -1, -2, -1],[2, 2, -4, 0] ],
[ [4, -1, -2, -1],[2, 1, -4, -3] ],
[ [4, -1, -2, -1],[1, -1, -3, -2] ],
[ [4, -1, -2, -1],[1, -2, -4, 2] ],
[ [4, -1, -2, -1],[4, 3, -3, -8] ],
[ [4, -1, -2, -1],[1, 3, -4, -5] ],
[ [4, -1, -2, -1],[3, 1, -4, -5] ],
[ [4, -1, -2, -1],[3, 2, -3, -7] ],
[ [4, -1, -2, -1],[3, 2, -3, -5] ],
[ [4, -1, -2, -1],[1, 1, -4, 2] ],
[ [4, -1, -2, -1],[1, 0, -4, -1] ] ];
#l := List( [ 1 .. Length( pairs ) ], i -> EstimateGlobalSectionsOfBundleOnMaximallyDegenerateCurves( pairs[ i ][ 1 ], pairs[ i ][ 2 ] ) );
l := List( [ 1 .. Length( pairs ) ], i -> FineApproximation( pairs[ i ][ 1 ], pairs[ i ][ 2 ] ) );

data_base_values := [
[0, 1, 2, 3, 4],
[0, 1],
[2, 3],
[3, 4],
[0, 2, 3],
[0, 2, 3],
[0, 2, 3],
[0, 1, 2, 3, 4],
[0, 1, 2, 3],
[0, 1, 2, 3],
[1, 2, 3, 4],
[0, 2, 3],
[0, 1, 2, 3, 4],
[4, 5, 6],
[0, 1, 2, 3, 4, 5],
[0, 1, 2, 3],
[0, 1, 2, 3, 4],
[0, 2, 3],
[0, 1, 2, 3, 4, 5, 6, 7],
[5, 6, 7],
[6, 7, 8, 9],
[0, 3, 5],
[2, 3, 4],
[1, 2, 3],
[0, 1],
[3, 4, 5],
[0, 1, 2, 3],
[2, 3, 4, 5, 6, 7, 8],
[0, 1, 2, 3, 4, 5, 6, 7],
[0, 2, 3],
[0, 1, 2, 3],
[0, 2, 3],
[0, 1],
[0, 1, 3, 5, 6],
[0, 1, 2],
[1, 2, 3, 4],
[0, 1],
[0, 1, 2, 3, 4, 5],
[0, 1, 3, 5, 6],
[0, 1, 2, 3, 4],
[0, 2, 3, 4, 5, 6, 7, 8, 9, 10],
[0, 1, 2, 3],
[0, 2, 3, 4, 5, 6, 7, 8],
[0, 1, 2, 3, 4, 5, 6, 7],
[1, 2, 3],
[0, 1, 2, 3, 4, 5, 6],
[0, 1, 2, 3, 4, 5, 6],
[4, 5, 6, 7, 8, 9],
[2, 3, 4, 5, 6, 7, 8],
[0, 1, 2, 3, 4, 5],
[3, 4, 5, 6, 7],
[0, 1, 2, 3],
[0, 1, 2, 3, 4, 5, 6],
[2, 5, 7, 8],
[2, 3],
[3, 4, 5, 6, 7],
[2, 3, 4, 5, 6],
[0, 1, 2, 3],
[4, 5, 7, 8, 9, 10, 11],
[3, 4, 5, 6, 7, 8, 9],
[5, 6],
[6, 7],
[1, 2, 6, 7, 10, 11, 13, 14, 15],
[6, 14, 21, 27, 32],
[4, 5, 6, 7],
[4, 5],
[3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17],
[0, 1, 2, 3, 4],
[0, 1],
[5, 7, 8],
[3, 4],
[1, 2, 3, 4],
[0, 1, 2, 3, 4, 5, 6],
[0, 1, 2],
[0, 1, 2, 3, 4],
[4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19],
[0, 1, 2, 4, 6, 7, 8, 9, 11],
[0, 1, 2, 4, 5, 6, 7, 8, 9, 11],
[0, 1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 14, 15, 16],
[2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
[0, 1, 2, 3, 4],
[0, 2, 3] ];

for i in [ 1 .. Length( l ) ] do
    dummy := ShallowCopy( l[ i ] );
    if Position( dummy, "NA" ) <> fail then
        Remove( dummy, Position( dummy, "NA" ) );
    fi;
    
    if Length( dummy ) = 0 then
        Print( Concatenation( "(*) Counter predicts no values | \t | values in data base are ", String( data_base_values[ i ] ), "\n" ) );
    elif Length( dummy ) > 0 then
        Print( Concatenation( "(*) Counter predicts ", String( dummy ), " | \t | values in data base are ", String( data_base_values[ i ] ), "\n" ) );
    fi;
od;
