<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Irreducible_complete_torus-invariant_curves_and_proper_1-cycles_in_a_toric_variety">
<Heading>Irreducible, complete, torus-invariant curves and proper 1-cycles in a toric variety</Heading>

<Section Label="Chapter_Irreducible_complete_torus-invariant_curves_and_proper_1-cycles_in_a_toric_variety_Section_GAP_category_of_irreducible_complete_torus-invariant_curves__ICT_curves">
<Heading>GAP category of irreducible, complete, torus-invariant curves (= ICT curves)</Heading>

<ManSection>
  <Filt Arg="object" Name="IsICTCurve" Label="for IsObject"/>
 <Returns>true or false
</Returns>
 <Description>
The GAP category for irreducible, complete, torus-invariant curves
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Irreducible_complete_torus-invariant_curves_and_proper_1-cycles_in_a_toric_variety_Section_Constructors_for_ICT_Curves">
<Heading>Constructors for ICT Curves</Heading>

<ManSection>
  <Oper Arg="X_Sigma, i, j" Name="ICTCurve" Label="for IsToricVariety, IsInt, IsInt"/>
 <Returns>an ICT curve
</Returns>
 <Description>
The arguments are a smooth and complete toric variety <Math>X_\Sigma</Math> and two non-negative and distinct integers <Math>i,j</Math>.
We then consider the i-th and j-th maximal cones <Math>\sigma_i</Math> and <Math>\sigma_j</Math>. ! If <Math>\tau := \sigma_i \cap \sigma_j</Math>
satisfies <Math>dim \left( \tau \right) = dim \left( \sigma_1 \right) - 1</Math>, then <Math>\tau</Math> corresponds to
an ICT-curve. We then construct this very ICT-curve.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Irreducible_complete_torus-invariant_curves_and_proper_1-cycles_in_a_toric_variety_Section_Attributes_for_ICT_curves">
<Heading>Attributes for ICT curves</Heading>

<ManSection>
  <Attr Arg="C" Name="AmbientToricVariety" Label="for IsICTCurve"/>
 <Returns>a toric variety
</Returns>
 <Description>
The argument is an ICT curve <Math>C</Math>. The output is the toric variety, in which this curve <Math>C</Math> lies.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="C" Name="IntersectedMaximalCones" Label="for IsICTCurve"/>
 <Returns>a list of two positive and distinct integers
</Returns>
 <Description>
The argument is an ICT curve <Math>C</Math>. The output are two integers, which indicate which maximal rays
were intersected to form the cone <Math>\tau</Math> associated to this curve <Math>C</Math>.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="C" Name="RayGenerators" Label="for IsICTCurve"/>
 <Returns>a list of lists of integers
</Returns>
 <Description>
The argument is an ICT curve <Math>C</Math>. The output is the list of ray-generators for the cone tau
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="C" Name="DefiningVariables" Label="for IsICTCurve"/>
 <Returns>a list
</Returns>
 <Description>
The argument is an ICT curve <Math>C</Math>. The output is the list of variables whose simultaneous vanishing locus
cuts out this curve.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="C" Name="LeftStructureSheaf" Label="for IsICTCurve"/>
 <Returns>a f.p. graded left S-module
</Returns>
 <Description>
The argument is an ICT curve <Math>C</Math>. The output is the f.p. graded left S-module which
sheafifes to the structure sheaf of this curve <Math>C</Math>.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="C" Name="RightStructureSheaf" Label="for IsICTCurve"/>
 <Returns>a f.p. graded right S-module
</Returns>
 <Description>
The argument is an ICT curve <Math>C</Math>. The output is the f.p. graded right S-module which
sheafifes to the structure sheaf of this curve <Math>C</Math>.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="C" Name="IntersectionU" Label="for IsICTCurve"/>
 <Returns>a list of integers
</Returns>
 <Description>
The argument is an ICT curve <Math>C</Math>. The output is the integral vector <Math>u</Math> used to compute intersection products
with Cartier divisors.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="C" Name="IntersectionList" Label="for IsICTCurve"/>
 <Returns>a list of integers
</Returns>
 <Description>
The argument is an ICT curve <Math>C</Math>. The output is a list with the intersection numbers of a canonical base
of the class group. This basis is to take <Math>\left( e_1, \dots, e_k \right)</Math> with <Math>e_i = \left( 0, \dots, 0,
1, 0, \dots, 0 \right) \in Cl \left( X_\Sigma \right)</Math>.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Irreducible_complete_torus-invariant_curves_and_proper_1-cycles_in_a_toric_variety_Section_Operations_with_ICTCurves">
<Heading>Operations with ICTCurves</Heading>

<ManSection>
  <Attr Arg="X_Sigma" Name="ICTCurves" Label="for IsToricVariety"/>
 <Returns>a list of ICT-curves.
</Returns>
 <Description>
For a smooth and complete toric variety <Math>X_\Sigma</Math>, this method computes a list of all ICT-curves in <Math>X_\Sigma</Math>.
Note that those curves can be numerically equivalent.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="C,D" Name="IntersectionProduct" Label="for IsICTCurve, IsToricDivisor"/>
 <Returns>an integer
</Returns>
 <Description>
Given an ICT-curve <Math>C</Math> and a divisor <Math>D</Math> in a smooth and complete toric variety <Math>X_\Sigma</Math>, this method computes
their intersection product.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="arg1,arg2" Name="IntersectionProduct" Label="for IsToricDivisor, IsICTCurve"/>
 <Description>
<P/>
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Irreducible_complete_torus-invariant_curves_and_proper_1-cycles_in_a_toric_variety_Section_GAP_category_for_proper_1-cycles">
<Heading>GAP category for proper 1-cycles</Heading>

<ManSection>
  <Filt Arg="object" Name="IsProper1Cycle" Label="for IsObject"/>
 <Returns>true or false
</Returns>
 <Description>
The GAP category for proper 1-cycles
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Irreducible_complete_torus-invariant_curves_and_proper_1-cycles_in_a_toric_variety_Section_Constructor_For_Proper_1-Cycles">
<Heading>Constructor For Proper 1-Cycles</Heading>

<ManSection>
  <Attr Arg="X_Sigma" Name="GeneratorsOfProper1Cycles" Label="for IsToricVariety"/>
 <Returns>a list of ICT-curves.
</Returns>
 <Description>
For a smooth and complete toric variety <Math>X_\Sigma</Math>, this method computes a list of all ICT-curves which are not
numerically equivalent. We use this list of ICT-curves as a basis of proper 1-cycles on <Math>X_\Sigma</Math> in the
constructor below, when computing the intersection form and the Nef-cone.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="X_Sigma, list" Name="Proper1Cycle" Label="for IsToricVariety, IsList"/>
 <Returns>a proper 1-cycle
</Returns>
 <Description>
The arguments are a smooth and complete toric variety <Math>X_\Sigma</Math> and a list of integers. We then use the integers
in this list as 'coordinates' of the proper 1-cycle with respect to the list of proper 1-cycles produced by the
previous method. We then return the corresponding proper 1-cycle.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Irreducible_complete_torus-invariant_curves_and_proper_1-cycles_in_a_toric_variety_Section_Attributes_for_proper_1-cycles">
<Heading>Attributes for proper 1-cycles</Heading>

<ManSection>
  <Attr Arg="C" Name="AmbientToricVariety" Label="for IsProper1Cycle"/>
 <Returns>a toric variety
</Returns>
 <Description>
The argument is a proper 1-cycle <Math>C</Math>. The output is the toric variety, in which this cycle <Math>C</Math> lies.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="C" Name="UnderlyingGroupElement" Label="for IsProper1Cycle"/>
 <Returns>a list
</Returns>
 <Description>
The argument is a proper 1-cycle. We then return the underlying group element (with respect to the generators
computed from the method \emph{GeneratorsOfProper1Cycles}).
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Irreducible_complete_torus-invariant_curves_and_proper_1-cycles_in_a_toric_variety_Section_Operations_with_proper_1-cycles">
<Heading>Operations with proper 1-cycles</Heading>

<ManSection>
  <Oper Arg="C,D" Name="IntersectionProduct" Label="for IsProper1Cycle, IsToricDivisor"/>
 <Returns>an integer
</Returns>
 <Description>
Given a proper 1-cycle <Math>C</Math> and a divisor <Math>D</Math> in a smooth and complete toric variety <Math>X_\Sigma</Math>, this method
computes their intersection product.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="arg1,arg2" Name="IntersectionProduct" Label="for IsToricDivisor, IsProper1Cycle"/>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="vari" Name="IntersectionForm" Label="for IsToricVariety"/>
 <Returns>a list of lists
</Returns>
 <Description>
Given a simplicial and complete toric variety, we can use proposition 6.4.1 of Cox-Schenk-Litte to compute
the intersection form <M>N^1 \left( X_\Sigma \right) \times N_1 \left( X_\Sigma \right) \to \mathbb{R} </M>.
We return a list of lists that encodes this mapping.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Irreducible_complete_torus-invariant_curves_and_proper_1-cycles_in_a_toric_variety_Section_Examples_in_projective_space">
<Heading>Examples in projective space</Heading>

<Example><![CDATA[
gap> P2 := ProjectiveSpace( 2 );
<A projective toric variety of dimension 2>
gap> ICTCurves( P2 );
[ <An irreducible, complete, torus-invariant curve in a toric variety
   given as V( [ x_3 ] )>,
  <An irreducible, complete, torus-invariant curve in a toric variety
   given as V( [ x_2 ] )>,
  <An irreducible, complete, torus-invariant curve in a toric variety
   given as V( [ x_1 ] )> ]
gap> C1 := ICTCurves( P2 )[ 1 ];
<An irreducible, complete, torus-invariant curve in a toric variety
 given as V( [ x_3 ] )>
gap> IntersectionForm( P2 );
[ [ 1 ] ]
gap> IntersectionProduct( C1, DivisorOfGivenClass( P2, [ 1 ] ) );
1
gap> IntersectionProduct( DivisorOfGivenClass( P2, [ 5 ] ), C1 );
5
]]></Example>


<Example><![CDATA[
gap> P3 := ProjectiveSpace( 3 );
<A projective toric variety of dimension 3>
gap> C1 := ICTCurves( P3 )[ 1 ];
<An irreducible, complete, torus-invariant curve in a toric variety
 given as V( [ x_3, x_4 ] )>
gap> vars := DefiningVariables( C1 );
[ x_3, x_4 ]
gap> structureSheaf1 := LeftStructureSheaf( C1 );;
gap> IsWellDefined( structureSheaf1 );
true
gap> structureSheaf2 := RightStructureSheaf( C1 );;
gap> IsWellDefined( structureSheaf2 );
true
]]></Example>


</Section>


</Chapter>

