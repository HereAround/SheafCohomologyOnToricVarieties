<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Wrapper_for_generators_of_semigroups_and_hyperplane_constraints_of_cones">
<Heading>Wrapper for generators of semigroups and hyperplane constraints of cones</Heading>

<Section Label="Chapter_Wrapper_for_generators_of_semigroups_and_hyperplane_constraints_of_cones_Section_GAP_Categories">
<Heading>GAP Categories</Heading>

<ManSection>
  <Filt Arg="object" Name="IsSemigroupForPresentationsByProjectiveGradedModules" Label="for IsObject"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
The GAP category of lists of integer-valued lists, which encode the generators of subsemigroups of <Math>Z^n</Math>.
 </Description>
</ManSection>


<ManSection>
  <Filt Arg="object" Name="IsAffineSemigroupForPresentationsByProjectiveGradedModules" Label="for IsObject"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
The GAP category of affine semigroups <Math>H</Math> in <Math>\mathbb{Z}^n</Math>. That means that there is a semigroup
<Math>G \subseteq \mathbb{Z}^n</Math> and <Math>p \in \mathbb{Z}^n</Math> such that <Math>H = p + G</Math>.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Wrapper_for_generators_of_semigroups_and_hyperplane_constraints_of_cones_Section_Constructors">
<Heading>Constructors</Heading>

<ManSection>
  <Oper Arg="L" Name="SemigroupForPresentationsByProjectiveGradedModules" Label="for IsList, IsInt"/>
 <Returns>a SemigroupGeneratorList
</Returns>
 <Description>
The argument is a list <Math>L</Math> and a non-negative integer <Math>d</Math>. We then check if this list could be the list of generators
of a subsemigroup of <Math>Z^d</Math>. If so, we create the corresponding SemigroupGeneratorList.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="arg" Name="SemigroupForPresentationsByProjectiveGradedModules" Label="for IsList"/>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="L, p" Name="AffineSemigroupForPresentationsByProjectiveGradedModules" Label="for IsSemigroupForPresentationsByProjectiveGradedModules, IsList"/>
 <Returns>an AffineSemigroup
</Returns>
 <Description>
The argument is a SemigroupForPresentationsByProjectiveGradedModules <Math>S</Math> and a point <Math>p \in \mathbb{Z}^n</Math> encoded as list
of integers. We then compute the affine semigroup <Math>p + S</Math>. Alternatively to <Math>S</Math> we allow the use of either a list of
generators (or a list of generators together with the embedding dimension).
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="arg1,arg2" Name="AffineSemigroupForPresentationsByProjectiveGradedModules" Label="for IsList, IsList"/>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="arg1,arg2,arg3" Name="AffineSemigroupForPresentationsByProjectiveGradedModules" Label="for IsList, IsInt, IsList"/>
 <Description>
<P/>
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Wrapper_for_generators_of_semigroups_and_hyperplane_constraints_of_cones_Section_Attributes">
<Heading>Attributes</Heading>

<ManSection>
  <Attr Arg="L" Name="GeneratorList" Label="for IsSemigroupForPresentationsByProjectiveGradedModules"/>
 <Returns>a list
</Returns>
 <Description>
The argument is a SemigroupForPresentationsByProjectiveGradedModules <Math>L</Math>. We then return the list of its generators.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="L" Name="EmbeddingDimension" Label="for IsSemigroupForPresentationsByProjectiveGradedModules"/>
 <Returns>a non-negative integer
</Returns>
 <Description>
The argument is a SemigroupForPresentationsByProjectiveGradedModules <Math>L</Math>. We then return the embedding dimension of this semigroup.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="L" Name="ConeHPresentationList" Label="for IsSemigroupForPresentationsByProjectiveGradedModules"/>
 <Returns>a list or fail
</Returns>
 <Description>
The argument is a SemigroupForPresentationsByProjectiveGradedModules <Math>L</Math>. If the associated semigroup is a cone semigroup,
then (during construction) an H-presentation of that cone was computed. We return the list of the corresponding
H-constraints. This conversion uses Normaliz and can fail if the cone if not full-dimensional. In case that
such a conversion error occured, the attribute is set to the value 'fail'.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="S" Name="Offset" Label="for IsAffineSemigroupForPresentationsByProjectiveGradedModules"/>
 <Returns>a list of integers
</Returns>
 <Description>
The argument is an AffineSemigroupForPresentationsByProjectiveGradedModules <Math>S</Math>. This one is given as <Math>S = p + H</Math> for a
point <Math>p \in \mathbb{Z}^n</Math> and a semigroup <Math>H \subseteq \mathbb{Z}^n</Math>. We then return the offset <Math>p</Math>.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="S" Name="UnderlyingSemigroup" Label="for IsAffineSemigroupForPresentationsByProjectiveGradedModules"/>
 <Returns>a SemigroupGeneratorList
</Returns>
 <Description>
The argument is an IsAffineSemigroupForPresentationsByProjectiveGradedModules <Math>S</Math>. This one is given as <Math>S = p + H</Math> for a
point <Math>p \in \mathbb{Z}^n</Math> and a semigroup <Math>H \subseteq \mathbb{Z}^n</Math>. We then return the SemigroupGeneratorList of <Math>H</Math>.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="S" Name="EmbeddingDimension" Label="for IsAffineSemigroupForPresentationsByProjectiveGradedModules"/>
 <Returns>a non-negative integer
</Returns>
 <Description>
The argument is an IsAffineSemigroupForPresentationsByProjectiveGradedModules <Math>S</Math>. We then return the embedding dimension
of this affine semigroup.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Wrapper_for_generators_of_semigroups_and_hyperplane_constraints_of_cones_Section_Property">
<Heading>Property</Heading>

<ManSection>
  <Prop Arg="L" Name="IsTrivial" Label="for IsSemigroupForPresentationsByProjectiveGradedModules"/>
 <Returns>true or false
</Returns>
 <Description>
The argument is a SemigroupForPresentationsByProjectiveGradedModules <Math>L</Math>. This property returns 'true' if this semigroup
is trivial and 'false' otherwise.
 </Description>
</ManSection>


<ManSection>
  <Prop Arg="L" Name="IsSemigroupOfCone" Label="for IsSemigroupForPresentationsByProjectiveGradedModules"/>
 <Returns>true, false
</Returns>
 <Description>
The argument is a SemigroupForPresentationsByProjectiveGradedModules <Math>L</Math>. We return if this is the semigroup of a cone.
 </Description>
</ManSection>


<ManSection>
  <Prop Arg="L" Name="IsTrivial" Label="for IsAffineSemigroupForPresentationsByProjectiveGradedModules"/>
 <Returns>true or false
</Returns>
 <Description>
The argument is an AffineSemigroupForPresentationsByProjectiveGradedModules. This property returns 'true' if the underlying
semigroup is trivial and otherwise 'false'.
 </Description>
</ManSection>


<ManSection>
  <Prop Arg="H" Name="IsAffineSemigroupOfCone" Label="for IsAffineSemigroupForPresentationsByProjectiveGradedModules"/>
 <Returns>true, false or fail
</Returns>
 <Description>
The argument is an IsAffineSemigroupForPresentationsByProjectiveGradedModules <Math>H</Math>. We return if this is an AffineConeSemigroup. If Normaliz cannot decide this 'fail'
is returned.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Wrapper_for_generators_of_semigroups_and_hyperplane_constraints_of_cones_Section_Operations">
<Heading>Operations</Heading>

<ManSection>
  <Oper Arg="L" Name="DecideIfIsConeSemigroupGeneratorList" Label="for IsList"/>
 <Returns>true, false or fail
</Returns>
 <Description>
The argument is a list <Math>L</Math> of generators of a semigroup in <Math>\mathbb{Z}^n</Math>. We then check if this
is the semigroup of a cone. In this case we return 'true', otherwise 'false'. If the operation fails due to
shortcommings in Normaliz we return 'fail'.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Wrapper_for_generators_of_semigroups_and_hyperplane_constraints_of_cones_Section_Check_if_point_is_contained_in_affine_cone_or_affine__semigroup">
<Heading>Check if point is contained in (affine) cone or (affine ) semigroup</Heading>

<ManSection>
  <Oper Arg="S, p" Name="PointContainedInSemigroup" Label="for IsSemigroupForPresentationsByProjectiveGradedModules, IsList"/>
 <Returns>true or false
</Returns>
 <Description>
The argument is a SemigroupForPresentationsByProjectiveGradedModules <Math>S</Math> of <Math>\mathbb{Z}^n</Math>, and an integral point <Math>p</Math> in this
lattice. This operation then verifies if the point <Math>p</Math> is contained in <Math>S</Math> or not.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="H, p" Name="PointContainedInAffineSemigroup" Label="for IsAffineSemigroupForPresentationsByProjectiveGradedModules, IsList"/>
 <Returns>true or false
</Returns>
 <Description>
The argument is an IsAffineSemigroupForPresentationsByProjectiveGradedModules <Math>H</Math> and a point <Math>p</Math>. The second argument
This method then checks if <Math>p</Math> lies in <Math>H</Math>.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Wrapper_for_generators_of_semigroups_and_hyperplane_constraints_of_cones_Section_Examples">
<Heading>Examples</Heading>

The following commands are used to handle generators of semigroups in <Math>\mathbb{Z}^n</Math>, generators of cones in <Math>\mathbb{Z}^n</Math>
as well as hyperplane constraints that define cones in <Math>\mathbb{Z}^n</Math>. Here are some examples:
<Example><![CDATA[
gap> semigroup1 := SemigroupForPresentationsByProjectiveGradedModules(
>               [[ 1,0 ], [ 1,1 ]] );
<A cone-semigroup in Z^2 formed as the span of 2 generators>
gap> IsSemigroupForPresentationsByProjectiveGradedModules( semigroup1 );
true
gap> GeneratorList( semigroup1 );
[ [ 1, 0 ], [ 1, 1 ] ]
gap> semigroup2 := SemigroupForPresentationsByProjectiveGradedModules(
>               [[ 2,0 ], [ 1,1 ]] );
<A non-cone semigroup in Z^2 formed as the span of 2 generators>
gap> IsSemigroupForPresentationsByProjectiveGradedModules( semigroup2 );
true
gap> GeneratorList( semigroup2 );
[ [ 2, 0 ], [ 1, 1 ] ]
]]></Example>


We can check if a semigroup in <Math>\mathbb{Z}^n</Math> is the semigroup of a cone. In case we can look at an H-presentation
of this cone.
<Example><![CDATA[
gap> IsSemigroupOfCone( semigroup1 );
true
gap> ConeHPresentationList( semigroup1 );
[ [ 0, 1 ], [ 1, -1 ] ]
gap> Display( ConeHPresentationList( semigroup1 ) );
[ [   0,  1 ],
  [   1, -1 ] ]
gap> IsSemigroupOfCone( semigroup2 );
false
gap> HasConeHPresentationList( semigroup2 );
false
]]></Example>


We can check membership of points in semigroups.
<Example><![CDATA[
gap> PointContainedInSemigroup( semigroup2, [ 1,0 ] );
false
gap> PointContainedInSemigroup( semigroup2, [ 2,0 ] );
true
]]></Example>


Given a semigroup <Math>S \subseteq \mathbb{Z}^n</Math> and a point <Math>p \in \mathbb{Z}^n</Math> we can consider
<Display> H := p + S = \left\{ p + x \; , \; x \in S \right\}. </Display>
We term this an affine semigroup. Given that <Math>S = C \cap \mathbb{Z}^n</Math> for a cone <Math>C \subseteq \mathbb{Z}^n</Math>, we use
the term affine cone_semigroup. The constructors are as follows:
<Example><![CDATA[
gap> affine_semigroup1 := AffineSemigroupForPresentationsByProjectiveGradedModules(
>                      semigroup1, [ -1, -1 ] );
<A non-trivial affine cone-semigroup in Z^2>
gap> affine_semigroup2 := AffineSemigroupForPresentationsByProjectiveGradedModules(
>                      semigroup2, [ 2, 2 ] );
<A non-trivial affine non-cone semigroup in Z^2>
]]></Example>


We can access the properties of these affine semigroups as follows.
<Example><![CDATA[
gap> IsAffineSemigroupOfCone( affine_semigroup2 );
false
gap> UnderlyingSemigroup( affine_semigroup2 );
<A non-cone semigroup in Z^2 formed as the span of 2 generators>
gap> Display( UnderlyingSemigroup( affine_semigroup2 ) );
A non-cone semigroup in Z^2 formed as the span of 2 generators -
generators are as follows:
[ [  2,  0 ],
  [  1,  1 ] ]
gap> IsAffineSemigroupOfCone( affine_semigroup1 );
true
gap> Offset( affine_semigroup2 );
[ 2, 2 ]
gap> ConeHPresentationList( UnderlyingSemigroup( affine_semigroup1 ) );
[ [ 0, 1 ], [ 1, -1 ] ]
]]></Example>


Of course we can also decide membership in affine (cone_)semigroups.
<Example><![CDATA[
gap> Display( affine_semigroup1 );
A non-trivial affine cone-semigroup in Z^2
Offset: [ -1, -1 ]
Hilbert basis: [ [ 1, 0 ], [ 1, 1 ] ]
gap> PointContainedInAffineSemigroup( affine_semigroup1, [ -2,-2 ] );
false
gap> PointContainedInAffineSemigroup( affine_semigroup1, [ 3,1 ] );
true
gap> Display( affine_semigroup2 );
A non-trivial affine non-cone semigroup in Z^2
Offset: [ 2, 2 ]
Semigroup generators: [ [ 2, 0 ], [ 1, 1 ] ]
gap> PointContainedInAffineSemigroup( affine_semigroup2, [ 3,2 ] );
false
gap> PointContainedInAffineSemigroup( affine_semigroup2, [ 3,3 ] );
true
]]></Example>


</Section>


</Chapter>

